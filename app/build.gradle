apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    flavorDimensions "default"
    defaultConfig {
        applicationId "com.aftabsikander.mercari"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    dataBinding {
        enabled = true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        Release {
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            //proguardFiles 'proguard-project.txt'
            //proguardFiles 'proguard-project-allowlogs.txt'
            signingConfig signingConfigs.Release
        }
        debug {
        }
    }

    Properties props_cc_release = new Properties()
    def propFile_cc_release = new File('mercari.release.signing.properties')
    if (propFile_cc_release.canRead()) {
        props_cc_release.load(new FileInputStream(propFile_cc_release))
        if (props_cc_release != null && props_cc_release.containsKey('STORE_FILE')
                && props_cc_release.containsKey('STORE_PASSWORD')
                && props_cc_release.containsKey('KEY_ALIAS')
                && props_cc_release.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.Release.storeFile = file(props_cc_release['STORE_FILE'])
            android.signingConfigs.Release.storePassword = props_cc_release['STORE_PASSWORD']
            android.signingConfigs.Release.keyAlias = props_cc_release['KEY_ALIAS']
            android.signingConfigs.Release.keyPassword = props_cc_release['KEY_PASSWORD']
        } else {
            println 'mercari.release.signing.properties found but some entries are missing'
            android.buildTypes.Release.signingConfig = null
        }
    } else {
        println 'mercari.release.signing.properties not found'
        android.buildTypes.Release.signingConfig = null
    }

    productFlavors {
        dev {
            applicationId "com.aftabsikander.mercari"
        }
        qa {
            applicationId "com.aftabsikander.mercari"
        }
        uat {
            applicationId "com.aftabsikander.mercari"
        }
        prod {
            applicationId "com.aftabsikander.mercari"
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            def date = new Date()
            def formattedDate = date.format('yyyy-MM-dd_HH-mm-ss')
            outputFileName = "${variant.name}-${variant.versionName}-${formattedDate}.apk"
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

}

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

final networkDependencies = [
        retrofit             : "com.squareup.retrofit2:retrofit:${rootProject.ext.RetrofitVersion}",
        retrofitGsonConverter: "com.squareup.retrofit2:converter-gson:${rootProject.ext.RetrofitVersion}",
        okhttp               : "com.squareup.okhttp3:okhttp:${rootProject.ext.OkHttpVersion}",
        okHttp3Logging       : "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.OkHttpVersion}",
]

final kotlinDependencies = [
        kotlinJdk: "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${rootProject.ext.kotlin_version}",
        kotlinKtx: "androidx.core:core-ktx:1.1.0-alpha05",
]

final supportDependencies = [
        multiDex        : "androidx.multidex:multidex:2.0.0",
        cardView        : "androidx.cardview:cardview:1.0.0",
        appCompat       : "androidx.appcompat:appcompat:1.1.0-alpha03",
        design          : "com.google.android.material:material:1.1.0-alpha04",
        recyclerView    : "androidx.recyclerview:recyclerview:1.0.0",
        constraintLayout: "androidx.constraintlayout:constraintlayout:1.1.3",
        preference      : "androidx.preference:preference:1.0.0"
]

final daggerInjection = [
        dagger              : "com.google.dagger:dagger:${rootProject.ext.daggerVersion}",
        daggerAndroid       : "com.google.dagger:dagger-android:${rootProject.ext.daggerVersion}",
        daggerAndroidSupport: "com.google.dagger:dagger-android-support:${rootProject.ext.daggerVersion}"
]

final imageLoadingDependencies = [
        glide         : "com.github.bumptech.glide:glide:4.8.0",
        glideTransform: "jp.wasabeef:glide-transformations:3.3.0"
]

final architectureComponents = [
        //Live data & View Model
        lifeCycleRuntime   : "android.arch.lifecycle:runtime:${rootProject.ext.archVersion}",
        lifeCycleExtensions: "android.arch.lifecycle:extensions:${rootProject.ext.archVersion}",
        viewModel          : "androidx.lifecycle:lifecycle-viewmodel:${rootProject.ext.viewModelVersion}"
]

final compileDep = [
        lifeCycleCompile    : "android.arch.lifecycle:compiler:${rootProject.ext.archVersion}",
        daggerprocessCompile: "com.google.dagger:dagger-android-processor:${rootProject.ext.daggerVersion}",
        daggerCompile       : "com.google.dagger:dagger-compiler:${rootProject.ext.daggerVersion}",
        glideCompile:"com.github.bumptech.glide:compiler:4.8.0"
]

final extras = [
        ankoCommon: "org.jetbrains.anko:anko-commons:${rootProject.ext.ankoVersion}",
        anko      : "org.jetbrains.anko:anko:${rootProject.ext.ankoVersion}",
        gson      : "com.google.code.gson:gson:${rootProject.ext.gsonVersion}",
        timber    : "com.jakewharton.timber:timber:${rootProject.ext.timberVersion}"
]

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation kotlinDependencies.values()
    implementation networkDependencies.values()
    implementation supportDependencies.values()
    implementation architectureComponents.values()
    implementation daggerInjection.values()
    implementation extras.values()
    implementation imageLoadingDependencies.values()
    kapt compileDep.values()


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0-beta01'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0-beta01'


}